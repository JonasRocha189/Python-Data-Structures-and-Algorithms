Time Complexity: based on number of operations to complete someething

Space Complexity: memory used to complete some operation

01 - Big O

check the worst case


O(n) -  linear
- drop constant: doesn't matter how many loops in a function, for example 2 loops would be O(2n), but in this case is just O(n)

o(n²) 
- when you have a loop inside another loop
- this is less eficiente
- Drop non dominants, when you have a O(n²) and also a O(n) loop in a function, you just does not consider the O(n), because it's much less important


O(1)
- when you have a return of some operation, example. return n + n
- like the other, does not matter how many aperation like n + n + n, is going to be O(1)
- this is the mos efficient


O log (n)
- when you need to find a number in a list, the most efficient way is dividing for 2 and checking if the number is the half
- it's log(n) because it's the number of tries to find a value. example, a list with 8 number is going to take 3 times, so it's log2 (8) = 3


OBS: if you have two diferent params, its not going to O(n) + O(n), it will be O(a) + O(b)

table of complexities
https://www.bigocheatsheet.com/



02 - Classes and Pointers
- when you point a variable to another variable and change the secound one, is not going to change the first
- But using dictionaries is diferent, if you chnage the secound one is going to change the first